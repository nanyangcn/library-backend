{"version":3,"sources":["queries.js","components/EditAuthor.js","components/Authors.js","components/Books.js","components/NewBook.js","components/LoginForm.js","components/Recommendation.js","App.js","index.js"],"names":["AUTHOR_DETAILS","gql","BOOK_DETAILS","ALL_AUTHORS","ALL_BOOKS","ME","CREATE_BOOK","EDIT_AUTHOR","LOGIN","BOOK_ADDED","EditAuthor","authors","useState","birthYear","setBirthYear","selectedOption","setSelectedOption","useMutation","onError","error","console","log","editAuthor","authorsNames","map","author","value","name","label","defaultValue","onChange","options","onSubmit","event","preventDefault","editedAuthor","setBornTo","Number","variables","type","target","Authors","show","a","key","id","born","bookCount","Books","books","filteredBooks","setFilteredBooks","useLazyQuery","getFilteredBooks","resultFilteredBooks","useEffect","genre","data","allBooks","genres","book","genresNames","Set","flat","unshift","title","published","NewBook","handleNewBook","setTitle","setAuthor","setPublished","setGenre","setGenres","submit","newBook","onClick","concat","join","LoginForm","handleLogin","username","setUsername","password","setPassword","Recommendation","favoriteBooks","favoriteGenre","App","page","setPage","token","setToken","setAuthors","setBooks","setFavoriteBooks","loggedUser","setLoggedUser","client","useApolloClient","updateCacheWith","addBook","booksInStore","readQuery","query","some","writeQuery","authorsInStore","allAuthors","find","getAuthors","resultAuthors","getBooks","resultBooks","getFavoriteBooks","resultFavoriteBooks","getLoggedUser","resultLoggedUser","login","update","store","response","createBook","useSubscription","onSubscriptionData","addedBook","subscriptionData","bookAdded","window","alert","localStorage","getItem","me","loginDisplay","display","logoutDisplay","user","setItem","message","style","resetStore","setTimeout","clear","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","option","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5574ed4a.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nconst AUTHOR_DETAILS = gql`\n  fragment AuthorDetails on Author {\n    name\n    born\n    bookCount\n    id\n  }\n`\n\nconst BOOK_DETAILS = gql`\n  fragment BookDetails on Book {\n    title\n    author {\n      ...AuthorDetails\n    }\n    published\n    genres\n    id\n  }\n  ${AUTHOR_DETAILS}\n`\n\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      ...AuthorDetails\n    }\n  }\n  ${AUTHOR_DETAILS}\n`\n\nexport const ALL_BOOKS = gql`\n  query getBooks($genre: String, $author: String) {\n    allBooks(genre: $genre, author: $author) {\n      ...BookDetails\n    }\n  }\n  ${BOOK_DETAILS}\n`\n\nexport const ME = gql`\n  query me {\n    me {\n      username\n      favoriteGenre\n      id\n    }\n  }\n`\n\nexport const CREATE_BOOK = gql`\n  mutation createBook(\n    $title: String!\n    $author: String!\n    $published: Int!\n    $genres: [String!]!\n  ) {\n    addBook(\n      title: $title\n      author: $author\n      published: $published\n      genres: $genres\n    ) {\n      ...BookDetails\n    }\n  }\n  ${BOOK_DETAILS}\n`\n\nexport const EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $setBornTo: Int!) {\n    editAuthor(name: $name, setBornTo: $setBornTo) {\n      ...AuthorDetails\n    }\n  }\n  ${AUTHOR_DETAILS}\n`\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      value\n    }\n  }\n`\n\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...BookDetails\n    }\n  }\n  ${BOOK_DETAILS}\n`\n","import React, { useState } from 'react'\nimport Select from 'react-select'\nimport { useMutation } from '@apollo/client'\n\nimport { EDIT_AUTHOR } from '../queries'\n\nconst EditAuthor = ({ authors }) => {\n  const [birthYear, setBirthYear] = useState('')\n  const [selectedOption, setSelectedOption] = useState(null)\n  const [editAuthor] = useMutation(EDIT_AUTHOR, {\n    onError: (error) => {\n      console.log(error)\n    },\n  })\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const editedAuthor = {\n      name: selectedOption.value,\n      setBornTo: Number(birthYear),\n    }\n\n    editAuthor({ variables: editedAuthor })\n\n    setBirthYear('')\n    setSelectedOption(null)\n  }\n  const authorsNames = authors.map((author) => {\n    const option = {\n      value: author.name,\n      label: author.name,\n    }\n    return option\n  })\n\n  return (\n    <div>\n      <h3>Set birth year</h3>\n      <Select\n        defaultValue={selectedOption}\n        onChange={setSelectedOption}\n        options={authorsNames}\n      />\n      <form onSubmit={handleSubmit}>\n        born\n        <input\n          type='number'\n          value={birthYear}\n          onChange={({ target }) => setBirthYear(target.value)}\n        />\n        <div>\n          <button type='submit'>update author</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default EditAuthor\n","import React from 'react'\n\nimport EditAuthor from './EditAuthor'\n\nconst Authors = ({ show, authors }) => {\n  if (!show || authors === []) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>authors</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>born</th>\n            <th>books</th>\n          </tr>\n          {authors.map((a) => (\n            <tr key={a.id}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <EditAuthor authors={authors} />\n    </div>\n  )\n}\n\nexport default Authors\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { useLazyQuery } from '@apollo/client'\n\nimport { ALL_BOOKS } from '../queries'\n\nconst Books = ({ show, books }) => {\n  const [selectedOption, setSelectedOption] = useState(null)\n  const [filteredBooks, setFilteredBooks] = useState([])\n  const [getFilteredBooks, resultFilteredBooks] = useLazyQuery(ALL_BOOKS)\n\n  useEffect(() => {\n    setFilteredBooks(books)\n  }, [books])\n\n  useEffect(() => {\n    getFilteredBooks({ variables: { genre: selectedOption?.value } })\n  }, [selectedOption, getFilteredBooks])\n\n  useEffect(() => {\n    if (resultFilteredBooks.data) {\n      setFilteredBooks(resultFilteredBooks.data.allBooks)\n    }\n  }, [resultFilteredBooks.data])\n\n  if (!show || filteredBooks === []) {\n    return null\n  }\n\n  const genres = books.map((book) => book.genres)\n  const genresUnique = [...new Set(genres.flat())]\n  const genresNames = genresUnique.map((genre) => {\n    const option = {\n      value: genre,\n      label: genre,\n    }\n    return option\n  })\n  genresNames.unshift({ value: null, label: '--show all--' })\n\n  return (\n    <div>\n      <h2>books</h2>\n      <p>\n        in genre <b>{selectedOption?.value}</b>\n      </p>\n      <div>\n        <Select\n          defaultValue={selectedOption}\n          onChange={setSelectedOption}\n          options={genresNames}\n        />\n      </div>\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th></th>\n              <th>author</th>\n              <th>published</th>\n            </tr>\n            {filteredBooks.map((book) => (\n              <tr key={book.title}>\n                <td>{book.title}</td>\n                <td>{book.author.name}</td>\n                <td>{book.published}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default Books\n","import React, { useState } from 'react'\n\nconst NewBook = ({ show, handleNewBook }) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  if (!show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n\n    const newBook = {\n      title,\n      author,\n      published: Number(published),\n      genres,\n    }\n    handleNewBook(newBook)\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={published}\n            onChange={({ target }) => setPublished(target.value)}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type='button'>\n            add genre\n          </button>\n        </div>\n        <div>genres: {genres.join(' ')}</div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook\n","import React, { useState } from 'react'\n\nconst LoginForm = ({ show, handleLogin }) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  if (!show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    handleLogin(username, password)\n    setUsername('')\n    setPassword('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          username:\n          <input\n            type='text'\n            id='username'\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password:\n          <input\n            type='password'\n            id='password'\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm\n","import React from 'react'\n\nconst Recommendation = ({ show, favoriteBooks, favoriteGenre }) => {\n  if (!show || favoriteBooks === []) {\n    return null\n  }\n\n  return (\n    <div>\n      <h2>recommendations</h2>\n      <p>\n        books in your favorite genre <b>{favoriteGenre}</b>\n      </p>\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th></th>\n              <th>author</th>\n              <th>published</th>\n            </tr>\n            {favoriteBooks.map((book) => (\n              <tr key={book.title}>\n                <td>{book.title}</td>\n                <td>{book.author.name}</td>\n                <td>{book.published}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default Recommendation\n","import React, { useState, useEffect } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport LoginForm from './components/LoginForm'\nimport Recommendation from './components/Recommendation'\n\nimport {\n  useMutation,\n  useLazyQuery,\n  useApolloClient,\n  useSubscription,\n} from '@apollo/client'\n\nimport {\n  LOGIN,\n  CREATE_BOOK,\n  ALL_BOOKS,\n  ALL_AUTHORS,\n  ME,\n  BOOK_ADDED,\n} from './queries'\n\nconst App = () => {\n  const [page, setPage] = useState('authors')\n  const [token, setToken] = useState(null)\n  const [authors, setAuthors] = useState([])\n  const [books, setBooks] = useState([])\n  const [favoriteBooks, setFavoriteBooks] = useState([])\n  const [loggedUser, setLoggedUser] = useState(null)\n\n  const client = useApolloClient()\n\n  const updateCacheWith = (addBook) => {\n    const booksInStore = client.readQuery({ query: ALL_BOOKS })\n    if (!booksInStore.allBooks.some((book) => book.id === addBook.id)) {\n      client.writeQuery({\n        query: ALL_BOOKS,\n        data: {\n          ...booksInStore,\n          allBooks: [...booksInStore.allBooks, addBook],\n        },\n      })\n\n      const allAuthors = client.readQuery({ query: ALL_AUTHORS }).allAuthors\n      const authorsInStore = {\n        allAuthors: allAuthors.map((author) => ({ ...author })),\n      }\n      const author = authorsInStore.allAuthors.find(\n        (author) => author.name === addBook.author.name\n      )\n      if (author) {\n        author.bookCount += 1\n      } else {\n        authorsInStore.allAuthors = [\n          ...authorsInStore.allAuthors,\n          addBook.author,\n        ]\n      }\n      client.writeQuery({\n        query: ALL_AUTHORS,\n        data: authorsInStore,\n      })\n    }\n  }\n\n  const [getAuthors, resultAuthors] = useLazyQuery(ALL_AUTHORS)\n  const [getBooks, resultBooks] = useLazyQuery(ALL_BOOKS)\n  const [getFavoriteBooks, resultFavoriteBooks] = useLazyQuery(ALL_BOOKS)\n  const [getLoggedUser, resultLoggedUser] = useLazyQuery(ME, {\n    onError: (error) => {\n      console.log(error)\n    },\n  })\n\n  const [login] = useMutation(LOGIN)\n  const [createBook] = useMutation(CREATE_BOOK, {\n    update: (store, response) => {\n      updateCacheWith(response.data.addBook)\n    },\n    onError: (error) => {\n      console.log(error)\n    },\n  })\n\n  useSubscription(BOOK_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedBook = subscriptionData.data.bookAdded\n      window.alert(`new book ${addedBook} added`)\n      updateCacheWith(addedBook)\n    },\n  })\n\n  useEffect(() => {\n    getAuthors()\n    getBooks()\n    const token = localStorage.getItem('token')\n    if (token) {\n      setToken(token)\n    }\n  }, [getAuthors, getBooks])\n\n  useEffect(() => {\n    if (resultLoggedUser.data) {\n      setLoggedUser(resultLoggedUser.data.me)\n      getFavoriteBooks({ variables: { genre: loggedUser?.favoriteGenre } })\n    }\n  }, [resultLoggedUser.data, loggedUser, getFavoriteBooks])\n\n  useEffect(() => {\n    if (resultAuthors.data) {\n      setAuthors(resultAuthors.data.allAuthors)\n    }\n  }, [resultAuthors.data])\n\n  useEffect(() => {\n    if (resultBooks.data) {\n      setBooks(resultBooks.data.allBooks)\n    }\n  }, [resultBooks.data])\n\n  useEffect(() => {\n    if (resultFavoriteBooks.data) {\n      setFavoriteBooks(resultFavoriteBooks.data.allBooks)\n    }\n  }, [resultFavoriteBooks.data])\n\n  const loginDisplay = {\n    display: token ? 'none' : '',\n  }\n  const logoutDisplay = {\n    display: token ? '' : 'none',\n  }\n\n  const handleNewBook = (newBook) => {\n    createBook({ variables: newBook })\n  }\n\n  const handleLogin = async (username, password) => {\n    try {\n      const user = await login({ variables: { username, password } })\n      localStorage.setItem('token', user.data.login.value)\n      setToken(user.data.login.value)\n      setPage('add')\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  const handleLogout = () => {\n    client.resetStore()\n    setPage('login')\n    setTimeout(() => localStorage.clear(), 100)\n    setToken(null)\n  }\n\n  const handleRecommend = () => {\n    getLoggedUser()\n    setPage('recommend')\n  }\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button style={loginDisplay} onClick={() => setPage('login')}>\n          login\n        </button>\n        <button style={logoutDisplay} onClick={() => setPage('add')}>\n          add book\n        </button>\n        <button style={logoutDisplay} onClick={handleRecommend}>\n          recommend\n        </button>\n        <button style={logoutDisplay} onClick={handleLogout}>\n          logout\n        </button>\n      </div>\n\n      <Authors show={page === 'authors'} authors={authors} />\n      <Books show={page === 'books'} books={books} getBooks={getBooks} />\n      <NewBook show={page === 'add'} handleNewBook={handleNewBook} />\n      <LoginForm show={page === 'login'} handleLogin={handleLogin} />\n      <Recommendation\n        show={page === 'recommend'}\n        favoriteGenre={loggedUser?.favoriteGenre}\n        favoriteBooks={favoriteBooks}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { setContext } from 'apollo-link-context';\n\nimport App from './App';\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n  split,\n} from '@apollo/client';\n\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    },\n  };\n});\n\nconst httpLink = new HttpLink({ uri: '/' });\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws:///graphql',\n  option: {\n    reconnect: true,\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}